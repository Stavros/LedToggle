/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include "stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

/* A variable to hold the value of the button pio edge capture register. */
volatile int edge_capture;

#ifdef BUTTON_PIO_BASE

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void handle_button_interrupts(void* context)
#else
static void handle_button_interrupts(void* context, alt_u32 id)
#endif
{
    /* Cast context to edge_capture's type. It is important that this be
     * declared volatile to avoid unwanted compiler optimization.
     */
    volatile int* edge_capture_ptr = (volatile int*) context;
    /* Store the value in the Button's edge capture register in *context. */
    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
    /* Reset the Button's edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0);

    /*
     * Read the PIO to delay ISR exit. This is done to prevent a spurious
     * interrupt in systems with high processor -> pio latency and fast
     * interrupts.
     */
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
}

/* Initialize the button_pio. */

static void init_button_pio()
{
    /* Recast the edge_capture pointer to match the alt_irq_register() function
     * prototype. */
    void* edge_capture_ptr = (void*) &edge_capture;
    /* Enable all 4 button interrupts. */
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_PIO_BASE, 0xf);
    /* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0x0);
    /* Register the interrupt handler. */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(BUTTON_PIO_IRQ_INTERRUPT_CONTROLLER_ID, BUTTON_PIO_IRQ,
      handle_button_interrupts, edge_capture_ptr, 0x0);
#else
    alt_irq_register( BUTTON_PIO_IRQ, edge_capture_ptr,
      handle_button_interrupts);
#endif
}
#endif /* BUTTON_PIO_BASE */

/*
static void count_led()
{
#ifdef LED_PIO_BASE
    IOWR_ALTERA_AVALON_PIO_DATA(
        LED_PIO_BASE,
        count
        );
#endif
}
*/

int main()
{
  printf("\n\n********************************\n");
  printf("*      Hello from Nios II!         *\n");
  printf("*     This is LedToggle Demo       *\n");
  printf("*   Press button to toggle Led ON  *\n");
  printf("* Release button to toggle Led OFF *\n");
  printf("************************************\n");

  /* Initialize the button pio. */

#ifdef BUTTON_PIO_BASE
  init_button_pio();
#endif

  //alt_u8 buttons=0xf;
  //alt_u8 type;

  //int count = 0;
  //int delay;
  while(1) {
    //IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, 1);
    while(edge_capture)
    {
      printf("Button pressed -> Led ON\n");
  	  IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE,0x01);
    }
    printf("Button released -> Led OFF\n");
    edge_capture = 0; /* Reset to 0 during wait/pause period. */
    //delay = 0;
    //while(delay < 2000000 ) {
      //delay++;
    //}
    //count = (count+1) % 8;
  }
  return 0;
}
